#Ansible playbook for Warby Parker Sr. Infrastructure Engineer homework assignment.
#Authored by Martin Beauchamp, Copyright 2015

# This playbook implements the required steps to setup the homework test environment
# as specified here: https://github.com/ChairmanTubeAmp/WPH/blob/master/InfrastructureEngineer.md
# It is written as one playbook for ease of grading and only calls external template files

# In addition to the explicit homework requirements, it does the following:
# 1. Updates the kernel, OS packages, and reboots if the variable yumupdate is set to True (This is set in the Vagrantfile)
# 2. Sets up the VMs with a New York timezone, and enables ntpd
# 3. Uses a "default deny" firewall policy for INPUT and FORWARD chains to drop all traffic except for whitelisted rules
# 4. It DOES NOT use ansible-vault for MySQL credentials as there are no actual secrets here (only homework secrets)
# 5. The Apache config logs the X-Forwarded-For field and the actual bytes transferred in and out

---

#############
# Hosts: all

- hosts: all

  #############
  # Variables

  vars:
    timezone: America/New_York
    
  #############
  # Tasks

  tasks:

    #############
    #Setup timezone files and start ntp

    # Set timezone to zone defined in timezone variable
  - name: Check current timezone
    shell: awk -F\" '{ print $2}' /etc/sysconfig/clock
    register: current_zone
    changed_when: False

  - name: Set timezone
    file: src=/usr/share/zoneinfo/{{ timezone }}  dest=/etc/localtime state=link force=yes
    when: current_zone.stdout != '{{ timezone }}'

  - name: Set CentOS clock
    template: src={{ vagrantfile_basepath }}/workingdirectory/vagrant/provisioning/etc-sysconfig-clock.j2 dest=/etc/sysconfig/clock owner=root group=root mode=0644

    # Start ntpd and enable it
  - service: name=ntpd state=started enabled=yes

    #############
    # Update kernel and packages
    
    # We get an out of date VM from Vagrant and so we must update the kernel and system packages
  - name: Kernel package updates
    action: yum name=kernel* state=latest
    # If there are any updates, we register the variable and see if it changes in the Reboot and Wait tasks.
    register: kernelupdate
    when: vagrantfile_yumupdate
    
  - name: System package updates
    action: yum name=* state=latest
    when: vagrantfile_yumupdate
    
  - name: Reboot
    command: /sbin/shutdown -r now "Ansible kernel updates triggered a reboot."
    async: 0
    poll: 0
    ignore_errors: true
    when: kernelupdate.changed

  - name: Wait for host to come back up
    #This wait_for doesn't actually test SSH with Vagrant because of the port changes, but it makes the Playbook work
    local_action: wait_for host={{ inventory_hostname }} delay=30 timeout=300 state=started
    sudo: false
    when: kernelupdate.changed

    #############
    #Setup /etc/hosts
    
  - name: Setup /etc/hosts
    template: src={{ vagrantfile_basepath }}/workingdirectory/vagrant/provisioning/etc-hosts.j2 dest=/etc/hosts owner=root group=root mode=0644

    ##############
    # Setup iptables

  - name: Insert iptables template
    template: src={{ vagrantfile_basepath }}/workingdirectory/vagrant/provisioning/etc-sysconfig-iptables.j2 dest=/etc/sysconfig/iptables owner=root group=root mode=0600
    notify: Restart iptables

  ##############
  # Handlers

  handlers:

  - name: Restart iptables
    service: name=iptables state=restarted

#############
# Hosts: front

- hosts: front

#############
# Tasks

  tasks:

    #############
    # Install the required application packages

  - name: Install Nginx, Memcached, and dependencies
    yum: pkg={{ item }} state=present
    with_items:
      - epel-release
      - nginx
      - memcached
      - emacs

    
    ##############
    # Start services
   
  - name: Enable Nginx
    service: name=nginx enabled=yes

  - name: Start Memcached and enable it
    service: name=memcached state=started enabled=yes

  handlers:

  - name: Restart Nginx
    service: name=nginx state=restarted


#############
# Hosts: app

- hosts: app

  #############
  # Variables

  vars:
    mysql_root_password: infra1234
    mysql_infratest_password: infra1234

  #############
  # Tasks

  tasks:

    #############
    # Install the required application packages

  - name: Install AMP and dependencies
    yum: pkg={{ item }} state=present
    with_items:
      - httpd
      - php
      - php-mysql
      - php-pecl-memcache
      - mysql-server
      - MySQL-python
      - emacs

    ##############
    # Copy the WPH files to the app server

  - name: Set ownership and modes on the Apache DocuemntRoot directory
    file: path=/var/www/html owner=apache group=apache mode=0770

  - name: Copy WPH PHP file to the app server
    copy: src={{ vagrantfile_basepath }}/workingdirectory/test.php dest=/var/www/html/test.php owner=apache group=apache mode=0660

  - name: Copy WPH SQL file to the app server
    copy: src={{ vagrantfile_basepath }}/workingdirectory/test.sql dest=/var/lib/mysql owner=mysql group=mysql mode=0640

    ##############
    # Start services
   
  - name: Enable Apache
    service: name=httpd state=started enabled=yes

  - name: Start MySQL and enable it
    service: name=mysqld state=started enabled=yes


    ##############
    # Prepare MySQL users and databases
    
    # Login with 'root' and blank password, then set a password for root
  - name: Update mysql root password for all root accounts
    mysql_user: name=root host={{ item }} password={{ mysql_root_password }} priv=*.*:ALL,GRANT
    with_items:
      - "{{ inventory_hostname }}"
      - 127.0.0.1
      - ::1
      - localhost

    # Setup root user's .my.cnf file
  - name: Set MySQL .my.cnf file
    template: src={{ vagrantfile_basepath }}/workingdirectory/vagrant/provisioning/root-my.cnf.j2 dest=/root/.my.cnf owner=root group=root mode=0600

    # Create test database
  - name: Create test MySQL database
    mysql_db: name=infratest state=present
    notify: Import infratest database

    # Setup infratest MySQL user
  - name: Add MySQL infratest user and password access from localhost
    mysql_user: name=infratest host={{ item }} password={{ mysql_infratest_password }} priv=infratest.*:ALL
    with_items:
      - "{{ inventory_hostname }}"
      - 127.0.0.1
      - ::1
      - localhost

    ##############
    # Configure Apache

  - name: Copy Apache config
    template: src={{ vagrantfile_basepath }}/workingdirectory/vagrant/provisioning/etc-httpd-conf-httpd.conf.j2 dest=/etc/httpd/conf/httpd.conf owner=root group=root mode=0600
    notify: Restart Apache
    
  ##############
  # Handlers

  handlers:

  - name: Restart Apache
    service: name=httpd state=restarted

    # Import a new database with name 'infratest'
  - name: Import infratest database
    mysql_db: name=infratest state=import target=/var/lib/mysql/test.sql
